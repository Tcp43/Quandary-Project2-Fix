
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import ast.*;
import interpreter.Interpreter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\015\000\002\010" +
    "\004\000\002\010\002\000\002\011\012\000\002\012\002" +
    "\000\002\012\004\000\002\012\006\000\002\004\004\000" +
    "\002\004\002\000\002\003\007\000\002\003\007\000\002" +
    "\003\006\000\002\003\011\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\005\003\000\002\005\006" +
    "\000\002\005\003\000\002\005\005\000\002\005\006\000" +
    "\002\005\006\000\002\005\004\000\002\005\003\000\002" +
    "\005\005\000\002\013\002\000\002\013\003\000\002\013" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\004\014\ufffe\001\002\000\004\014\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\002\uffff\014\uffff\001\002\000\006\036\011\040" +
    "\012\001\002\000\004\006\145\001\002\000\004\006\013" +
    "\001\002\000\010\007\ufffc\014\015\035\ufffc\001\002\000" +
    "\006\007\020\035\017\001\002\000\004\040\016\001\002" +
    "\000\006\007\ufffb\035\ufffb\001\002\000\004\014\143\001" +
    "\002\000\004\015\021\001\002\000\020\010\023\014\031" +
    "\015\024\016\ufff8\020\030\022\022\040\025\001\002\000" +
    "\016\005\037\006\042\034\040\036\036\037\034\040\041" +
    "\001\002\000\016\005\037\006\042\034\040\036\036\037" +
    "\034\040\041\001\002\000\020\010\023\014\031\015\024" +
    "\016\ufff8\020\030\022\022\040\025\001\002\000\004\017" +
    "\132\001\002\000\020\010\023\014\031\015\024\016\ufff8" +
    "\020\030\022\022\040\025\001\002\000\004\016\130\001" +
    "\002\000\004\006\073\001\002\000\004\040\032\001\002" +
    "\000\004\017\033\001\002\000\016\005\037\006\042\034" +
    "\040\036\036\037\034\040\041\001\002\000\036\004\ufff0" +
    "\005\ufff0\007\ufff0\011\ufff0\012\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0" +
    "\001\002\000\036\004\uffe9\005\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\035\uffe9\001\002\000\004\006\070\001" +
    "\002\000\016\005\037\006\042\034\040\036\036\037\034" +
    "\040\041\001\002\000\004\006\063\001\002\000\040\004" +
    "\uffee\005\uffee\006\055\007\uffee\011\uffee\012\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\035\uffee\001\002\000\016\005\037\006\042\034\040" +
    "\036\036\037\034\040\041\001\002\000\012\004\045\005" +
    "\046\011\044\012\047\001\002\000\022\010\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\040\ufff7\001" +
    "\002\000\016\005\037\006\042\034\040\036\036\037\034" +
    "\040\041\001\002\000\016\005\037\006\042\034\040\036" +
    "\036\037\034\040\041\001\002\000\016\005\037\006\042" +
    "\034\040\036\036\037\034\040\041\001\002\000\036\004" +
    "\uffe2\005\uffe2\007\uffe2\011\uffe2\012\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\035" +
    "\uffe2\001\002\000\036\004\uffe3\005\uffe3\007\uffe3\011\uffe3" +
    "\012\047\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\035\uffe3\001\002\000\036\004\uffe4" +
    "\005\uffe4\007\uffe4\011\uffe4\012\047\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4" +
    "\001\002\000\012\004\045\005\046\007\054\012\047\001" +
    "\002\000\036\004\uffe8\005\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\035\uffe8\001\002\000\022\005\037\006\042" +
    "\007\uffe7\034\040\035\uffe7\036\036\037\034\040\041\001" +
    "\002\000\006\007\061\035\060\001\002\000\014\004\045" +
    "\005\046\007\uffe6\012\047\035\uffe6\001\002\000\016\005" +
    "\037\006\042\034\040\036\036\037\034\040\041\001\002" +
    "\000\036\004\uffef\005\uffef\007\uffef\011\uffef\012\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\035\uffef\001\002\000\014\004\045\005\046\007" +
    "\uffe5\012\047\035\uffe5\001\002\000\020\005\037\006\042" +
    "\007\064\034\040\036\036\037\034\040\041\001\002\000" +
    "\036\004\uffed\005\uffed\007\uffed\011\uffed\012\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\035\uffed\001\002\000\012\004\045\005\046\007\066" +
    "\012\047\001\002\000\036\004\uffec\005\uffec\007\uffec\011" +
    "\uffec\012\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\035\uffec\001\002\000\036\004" +
    "\uffea\005\uffea\007\uffea\011\uffea\012\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\035" +
    "\uffea\001\002\000\016\005\037\006\042\034\040\036\036" +
    "\037\034\040\041\001\002\000\012\004\045\005\046\007" +
    "\072\012\047\001\002\000\036\004\uffeb\005\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\001\002\000\020" +
    "\005\037\006\077\033\076\034\040\036\036\037\034\040" +
    "\041\001\002\000\010\007\124\031\117\032\120\001\002" +
    "\000\024\004\045\005\046\012\047\023\102\024\104\025" +
    "\105\026\107\027\103\030\106\001\002\000\020\005\037" +
    "\006\077\033\076\034\040\036\036\037\034\040\041\001" +
    "\002\000\020\005\037\006\077\033\076\034\040\036\036" +
    "\037\034\040\041\001\002\000\010\007\116\031\117\032" +
    "\120\001\002\000\026\004\045\005\046\007\054\012\047" +
    "\023\102\024\104\025\105\026\107\027\103\030\106\001" +
    "\002\000\016\005\037\006\042\034\040\036\036\037\034" +
    "\040\041\001\002\000\016\005\037\006\042\034\040\036" +
    "\036\037\034\040\041\001\002\000\016\005\037\006\042" +
    "\034\040\036\036\037\034\040\041\001\002\000\016\005" +
    "\037\006\042\034\040\036\036\037\034\040\041\001\002" +
    "\000\016\005\037\006\042\034\040\036\036\037\034\040" +
    "\041\001\002\000\016\005\037\006\042\034\040\036\036" +
    "\037\034\040\041\001\002\000\016\004\045\005\046\007" +
    "\uffdf\012\047\031\uffdf\032\uffdf\001\002\000\016\004\045" +
    "\005\046\007\uffdc\012\047\031\uffdc\032\uffdc\001\002\000" +
    "\016\004\045\005\046\007\uffde\012\047\031\uffde\032\uffde" +
    "\001\002\000\016\004\045\005\046\007\uffe1\012\047\031" +
    "\uffe1\032\uffe1\001\002\000\016\004\045\005\046\007\uffdd" +
    "\012\047\031\uffdd\032\uffdd\001\002\000\016\004\045\005" +
    "\046\007\uffe0\012\047\031\uffe0\032\uffe0\001\002\000\010" +
    "\007\uffd8\031\uffd8\032\uffd8\001\002\000\020\005\037\006" +
    "\077\033\076\034\040\036\036\037\034\040\041\001\002" +
    "\000\020\005\037\006\077\033\076\034\040\036\036\037" +
    "\034\040\041\001\002\000\010\007\uffda\031\117\032\uffda" +
    "\001\002\000\010\007\uffdb\031\uffdb\032\uffdb\001\002\000" +
    "\010\007\uffd9\031\uffd9\032\uffd9\001\002\000\016\010\023" +
    "\014\031\015\024\020\030\022\022\040\025\001\002\000" +
    "\022\010\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\126" +
    "\022\ufff6\040\ufff6\001\002\000\016\010\023\014\031\015" +
    "\024\020\030\022\022\040\025\001\002\000\022\010\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\040" +
    "\ufff4\001\002\000\006\002\ufffd\014\ufffd\001\002\000\004" +
    "\016\ufff9\001\002\000\016\005\037\006\042\034\040\036" +
    "\036\037\034\040\041\001\002\000\012\004\045\005\046" +
    "\011\134\012\047\001\002\000\022\010\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\040\ufff5\001\002" +
    "\000\004\016\136\001\002\000\022\010\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\040\ufff1\001\002" +
    "\000\012\004\045\005\046\011\140\012\047\001\002\000" +
    "\022\010\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\040\ufff2\001\002\000\012\004\045\005\046\011" +
    "\142\012\047\001\002\000\022\010\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\020\ufff3\021\ufff3\022\ufff3\040\ufff3\001\002\000" +
    "\004\040\144\001\002\000\006\007\ufffa\035\ufffa\001\002" +
    "\000\004\014\146\001\002\000\004\040\147\001\002\000" +
    "\004\007\150\001\002\000\004\015\151\001\002\000\020" +
    "\010\023\014\031\015\024\016\ufff8\020\030\022\022\040" +
    "\025\001\002\000\004\016\153\001\002\000\006\002\ufffe" +
    "\014\ufffe\001\002\000\006\002\000\014\155\001\002\000" +
    "\004\040\012\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\002\004\010\003\001\001\000\004\011" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\025\004\026\001\001\000\006\005\140" +
    "\006\034\001\001\000\006\005\136\006\034\001\001\000" +
    "\006\003\025\004\134\001\001\000\002\001\001\000\006" +
    "\003\025\004\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\042" +
    "\006\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\066\006\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\052\006\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\051" +
    "\006\034\001\001\000\006\005\050\006\034\001\001\000" +
    "\006\005\047\006\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\056\006\034\013\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\061\006\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\064" +
    "\006\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\070\006\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\074\006\034\007\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\074\006\034\007\122\001\001\000" +
    "\010\005\100\006\034\007\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\114\006\034\001\001\000" +
    "\006\005\113\006\034\001\001\000\006\005\112\006\034" +
    "\001\001\000\006\005\111\006\034\001\001\000\006\005" +
    "\110\006\034\001\001\000\006\005\107\006\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\074\006\034\007\121\001\001\000" +
    "\010\005\074\006\034\007\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\124\001" +
    "\001\000\002\001\001\000\004\003\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\132\006\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\025" +
    "\004\151\001\001\000\002\001\001\000\004\010\153\001" +
    "\001\000\004\011\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= fdecls INT MAIN LPAREN INT IDENT RPAREN LCURLY stmtList RCURLY fdecls 
            {
              Program RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		java.util.List<FunctionDecl> fs = (java.util.List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int argNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String argName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.List<FunctionDecl> gs = (java.util.List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       java.util.ArrayList<FunctionDecl> all =new java.util.ArrayList<FunctionDecl>(fs);
       all.addAll(gs);
       RESULT = new Program(argName, sl, all, loc(argNameleft, argNameright));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fdecls ::= fdecls fdecl 
            {
              java.util.List<FunctionDecl> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.List<FunctionDecl> fs = (java.util.List<FunctionDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fs.add(fd); RESULT = fs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdecls",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fdecls ::= 
            {
              java.util.List<FunctionDecl> RESULT =null;
		 RESULT = new java.util.ArrayList<FunctionDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdecls",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fdecl ::= INT IDENT LPAREN params RPAREN LCURLY stmtList RCURLY 
            {
              FunctionDecl RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.util.List<String> ps = (java.util.List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FunctionDecl(fname, ps, sl, loc(fnameleft, rbright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdecl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // params ::= 
            {
              java.util.List<String> RESULT =null;
		 RESULT = new java.util.ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // params ::= INT IDENT 
            {
              java.util.List<String> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         java.util.ArrayList<String> ps = new java.util.ArrayList<String>();
         ps.add(p);
         RESULT = ps;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // params ::= params COMMA INT IDENT 
            {
              java.util.List<String> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.util.List<String> ps = (java.util.List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ps.add(p); RESULT = ps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtList ::= stmt stmtList 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StmtList(s, sl, loc(sleft, sright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtList ::= 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= INT IDENT ASSIGN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclStmt(varName, e, loc(varNameleft, varNameright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= IF LPAREN cond RPAREN stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, s, null, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= IDENT ASSIGN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStmt(varName, e, loc(varNameleft, varNameright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= IF LPAREN cond RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, s1, s2, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= PRINT expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= LCURLY stmtList RCURLY 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= INTCONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long c = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= IDENT LPAREN args RPAREN 
            {
              Expr RESULT =null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.List<Expr> as = (java.util.List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CallExpr(fname, as, loc(fnameleft, rparright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentExpr(varName, loc(varNameleft, varNameright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= RANDOMINT LPAREN RPAREN 
            {
              Expr RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RandomIntExpr(loc(rileft, rpright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= RANDOMINT LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RandomIntBoundedExpr(e, loc(rileft, rpright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= MAIN LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MainCallExpr(e, loc(mleft, rparright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryMinusExpr(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= binaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryExpr e = (BinaryExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args ::= 
            {
              java.util.List<Expr> RESULT =null;
		 RESULT = new java.util.ArrayList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args ::= expr 
            {
              java.util.List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         java.util.ArrayList<Expr> as = new java.util.ArrayList<Expr>();
         as.add(e);
         RESULT = as;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args ::= args COMMA expr 
            {
              java.util.List<Expr> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.util.List<Expr> as = (java.util.List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 as.add(e); RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binaryExpr ::= expr PLUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binaryExpr ::= expr MINUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binaryExpr ::= expr TIMES expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond ::= expr LE expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.LE, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond ::= expr GE expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.GE, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= expr LT expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.LT, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= expr GT expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.GT, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= expr EQ expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.EQ, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cond ::= expr NE expr 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(e1, CompCond.NE, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= cond AND cond 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond e1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond e2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(e1, LogicalCond.AND, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= cond OR cond 
            {
              Cond RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond e1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond e2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(e1, LogicalCond.OR, e2, loc(e1left, e2right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= NOT cond 
            {
              Cond RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond e = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(e, LogicalCond.NOT, null, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= LPAREN cond RPAREN 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
